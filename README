#include <stdio.h>
#include <stdlib.h> // Contém a função system()
#include <ctype.h>
#include <time.h>

// Matriz que representa o nosso tabuleiro
char tabuleiro[3][3];

// Caracteres para os jogadores
const char JOGADOR = 'X';
const char COMPUTADOR = 'O';

// Protótipos das funções
void resetarTabuleiro();
void imprimirTabuleiro();
int verificarEspacosVazios();
void jogadaDoJogador();
void jogadaDoComputador();
char verificarVencedor();
void imprimirVencedor(char vencedor);
int i, j;

int main()
{
    char vencedor = ' ';
    char resposta;

    srand(time(0));

    do
    {
        vencedor = ' ';
        resposta = ' ';
        resetarTabuleiro();

        while (vencedor == ' ' && verificarEspacosVazios() != 0)
        {
            // OTIMIZAÇÃO 1: Limpa a tela antes de cada rodada
            system("cls"); // "cls" é o comando para limpar o console no Windows

            printf("=== JOGO DA VELHA ===\n");
            imprimirTabuleiro();

            jogadaDoJogador();
            vencedor = verificarVencedor();
            if (vencedor != ' ' || verificarEspacosVazios() == 0)
            {
                break;
            }

            // O computador joga (sem limpar a tela para o jogador ver a sua própria jogada)
            jogadaDoComputador();
            vencedor = verificarVencedor();
            if (vencedor != ' ' || verificarEspacosVazios() == 0)
            {
                break;
            }
        }
        
        // Limpa a tela uma última vez para mostrar o resultado final de forma limpa
        system("cls");
        printf("=== FIM DE JOGO ===\n");
        imprimirTabuleiro();
        imprimirVencedor(vencedor);

        printf("\nGostaria de jogar novamente? (S/N): ");
        scanf(" %c", &resposta);
        resposta = toupper(resposta);

    } while (resposta == 'S');

    printf("\nObrigado por jogar!\n\n");

    // OTIMIZAÇÃO 2: Pausa o console antes de fechar
    system("pause");

    return 0;
}

// Função para inicializar/limpar o tabuleiro com espaços vazios
void resetarTabuleiro()
{
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 3; j++)
        {
            tabuleiro[i][j] = ' ';
        }
    }
}

// Função para desenhar o tabuleiro no console
void imprimirTabuleiro()
{
    printf("\n");
    printf(" %c | %c | %c ", tabuleiro[0][0], tabuleiro[0][1], tabuleiro[0][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", tabuleiro[1][0], tabuleiro[1][1], tabuleiro[1][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", tabuleiro[2][0], tabuleiro[2][1], tabuleiro[2][2]);
    printf("\n");
}

// Conta o número de casas livres no tabuleiro
int verificarEspacosVazios()
{
    int espacosLivres = 9;
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 3; j++)
        {
            if (tabuleiro[i][j] != ' ')
            {
                espacosLivres--;
            }
        }
    }
    return espacosLivres;
}

// Função para processar a jogada do usuário
void jogadaDoJogador()
{
    int x, y;

    do
    {
        printf("\nSua vez. Digite a linha e a coluna (1-3) separadas por espaco: ");
        scanf("%d %d", &x, &y);
        x--; 
        y--; 

        if (x < 0 || x > 2 || y < 0 || y > 2)
        {
            printf("Posicao invalida! Tente novamente.\n");
        }
        else if (tabuleiro[x][y] != ' ')
        {
            printf("Essa casa ja foi escolhida! Tente novamente.\n");
        }
        else
        {
            tabuleiro[x][y] = JOGADOR;
            break;
        }
    } while (1);
}

// Função para a jogada do computador (aleatória)
void jogadaDoComputador()
{
    int x, y;

    if (verificarEspacosVazios() > 0)
    {
        do
        {
            x = rand() % 3;
            y = rand() % 3;
        } while (tabuleiro[x][y] != ' ');

        tabuleiro[x][y] = COMPUTADOR;
    }
}

// Verifica se há um vencedor
char verificarVencedor()
{
    // Verificar linhas
    for (i = 0; i < 3; i++)
    {
        if (tabuleiro[i][0] == tabuleiro[i][1] && tabuleiro[i][0] == tabuleiro[i][2] && tabuleiro[i][0] != ' ')
        {
            return tabuleiro[i][0];
        }
    }
    // Verificar colunas
    for (j = 0; j < 3; j++)
    {
        if (tabuleiro[0][j] == tabuleiro[1][j] && tabuleiro[0][j] == tabuleiro[2][j] && tabuleiro[0][j] != ' ')
        {
            return tabuleiro[0][j];
        }
    }
    // Verificar diagonais
    if (tabuleiro[0][0] == tabuleiro[1][1] && tabuleiro[0][0] == tabuleiro[2][2] && tabuleiro[0][0] != ' ')
    {
        return tabuleiro[0][0];
    }
    if (tabuleiro[0][2] == tabuleiro[1][1] && tabuleiro[0][2] == tabuleiro[2][0] && tabuleiro[0][2] != ' ')
    {
        return tabuleiro[0][2];
    }

    return ' ';
}

// Imprime a mensagem de final de jogo
void imprimirVencedor(char vencedor)
{
    if (vencedor == JOGADOR)
    {
        printf("\nPARABENS! Voce venceu!\n");
    }
    else if (vencedor == COMPUTADOR)
    {
        printf("\nQUE PENA! O computador venceu!\n");
    }
}
    
